#!/usr/bin/python
import re
import inspect
import datetime
import sys
import xml.etree.ElementTree as ET
import json
import os
import ConfigParser
import time
import portalocker
from inspect import currentframe, getframeinfo

from memcache_addon_utils import *
LOG = Log(LOG_PATH)

TREE = ET.parse(sys.stdin)
CONFIG_PARAMS = {}
if os.path.isfile(CONFIG_PARAMS_PATH):
	file = open(CONFIG_PARAMS_PATH, "rb")
	portalocker.lock(file, portalocker.LOCK_SH)
	CONFIG_PARAMS = json.load( file )
	portalocker.unlock(file)

if "PARAM_ses_to_memcache" not in CONFIG_PARAMS:
        TREE.write(sys.stdout)
        sys.exit()

if CONFIG_PARAMS["PARAM_ses_to_memcache"] == "on":
	for name in TREE.findall("./elem/name"):
		if name.text in CONFIG_PARAMS:
			continue
		
		apache_data = os.popen("sbin/mgrctl -m ispmgr webdomain.plain elid=%s -o xml" % name.text).read()
		apache_data = ET.fromstring( apache_data ).find("./apache_data").text
		#save original values
		pattern = re.search("php_admin_value session.save_path\s+(\S+)", apache_data)
		#TODO do things if not pattern
		if pattern:
			CONFIG_PARAMS[name.text] = pattern.groups(1)
			new_data = re.sub("(php_admin_value session.save_path\s+)(\S+)", r'\1"%s"' % "tcp://localhost:11211", apache_data)
			res = os.popen("sbin/mgrctl -m ispmgr webdomain.plain elid=%s apache_data='%s' sok=ok" % (name.text, new_data) ).read()
			if res.strip() != "OK":
				LOG.write("ispmgr error: %s" % res)
				pass
				#TODO ERROR
else:
	to_delete = []
        for name in TREE.findall("./elem/name"):
                if name.text in CONFIG_PARAMS:
			to_delete.append( name.text )
                        apache_data = os.popen("sbin/mgrctl -m ispmgr webdomain.plain elid=%s -o xml" % name.text).read()
                        apache_data = ET.fromstring( apache_data ).find("./apache_data").text
                        old_php_admin_value = CONFIG_PARAMS[name.text][0] #XXX "[u/var/www/user/data/mod-tmp]"
                        #LOG.write("OLD VALUE: %s" % old_php_admin_value)
                        new_data = re.sub("(php_admin_value session.save_path\s+)(\S+)", r'\1%s' % old_php_admin_value, apache_data)
                        #LOG.write("NEW_DATA RESOTRE: %s" % new_data)
                        res = os.popen("sbin/mgrctl -m ispmgr webdomain.plain elid=%s apache_data='%s' sok=ok" % (name.text, new_data) ).read()
                        if res.strip() != "OK":
                                LOG.write("ispmgr error: %s" % res)
                                pass
                                #TODO TRHOW ERROR
	for e in to_delete:
		del CONFIG_PARAMS[e]

file = open(CONFIG_PARAMS_PATH, "wb")
portalocker.lock(file, portalocker.LOCK_EX)
json.dump(CONFIG_PARAMS, file )
portalocker.unlock(file)

TREE.write(sys.stdout)
